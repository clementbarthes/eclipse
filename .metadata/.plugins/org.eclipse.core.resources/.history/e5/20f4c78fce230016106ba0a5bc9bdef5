//============================================================================
// Name        : sampling.cpp
// Author      : Clement Barthes
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <signal.h>
#include <iostream>
#include <fstream>
#include<sstream>
#include<fcntl.h>
#include <unistd.h>
#include <sys/time.h>

#include <sys/types.h>
#include <sys/mman.h>
#include <err.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
using namespace std;

const string gpio_filepath = "/sys/class/gpio/";
const string export_File = "export";
const string direction_File= "gpio67/direction";
const string gpio_File = "gpio67/value";

#define GPIO1_START_ADDR 0x4804C000
#define GPIO1_END_ADDR   0x4804e000
#define GPIO1_SIZE (GPIO1_END_ADDR - GPIO1_START_ADDR)

#define GPIO_SETDATAOUT 0x194
#define GPIO_CLEARDATAOUT 0x190
#define pin67 (1<<4)

volatile void *gpio_addr;
volatile unsigned int *gpio_setdataout_addr;
volatile unsigned int *gpio_cleardataout_addr;
int fd = open("/dev/mem", O_RDWR);

mmap(NULL, 4096, PROT_READ, MAP_PRIVATE, fd, 0);


int *clearPinAddress = (int*)(0x481AC190);
int *setPinAddress = (int*)(0x481AC194);

void sigTimer_handler(int signum);

int main() {

	ofstream setPinFileStream;
	setPinFileStream.open((gpio_filepath + export_File).c_str());
	setPinFileStream << "67";
	setPinFileStream.close();
	setPinFileStream.open((gpio_filepath + direction_File).c_str());
	setPinFileStream << "out";
	setPinFileStream.close();




	struct itimerval timer;
	/* Initial timeout value */
	timer.it_value.tv_sec = 1;  //in sec
	timer.it_value.tv_usec = 0; // in usec
	/* Repetitive timer */
	timer.it_interval.tv_sec = 0;  //in sec
	timer.it_interval.tv_usec = 100000;

	signal(SIGALRM, &sigTimer_handler);
	printf("Timer: %i \n", setitimer(ITIMER_REAL, &timer, NULL));

	for (;;) {
		sleep(1);
	}
	return 0;
}


void sigTimer_handler(int signum){
	static bool flipFlop = 0;
	if((flipFlop = !flipFlop)){
		cout << "Clear" << endl;
		*clearPinAddress = 0x00000004;
	} else {
		cout << "Set" << endl;
		*setPinAddress = 0x00000004;
	}


}
