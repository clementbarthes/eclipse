//============================================================================
// Name        : sampling.cpp
// Author      : Clement Barthes
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <signal.h>
#include <iostream>
#include <fstream>
#include <unistd.h>
#include <sys/time.h>
using namespace std;

const string gpio_filepath = "/sys/class/gpio/";
const string export_File = "export";
const string direction_File= "gpio67/direction";
const string gpio_File = "gpio67/value";
static ofstream gpio_fs;

void sigTimer_handler(int signum);

int main() {

	ofstream setPinFileStream;
	setPinFileStream.open((gpio_filepath + export_File).c_str());
	setPinFileStream << "67";
	setPinFileStream.close();
	setPinFileStream.open((gpio_filepath + direction_File).c_str());
	setPinFileStream << "out";
	setPinFileStream.close();



	struct itimerval timer;
	/* Initial timeout value */
	timer.it_value.tv_sec = 1;  //in sec
	timer.it_value.tv_usec = 0; // in usec
	/* Repetitive timer */
	timer.it_interval.tv_sec = 0;  //in sec
	timer.it_interval.tv_usec = 100;

	signal(SIGALRM, &sigTimer_handler);
	printf("Timer: %i \n", setitimer(ITIMER_REAL, &timer, NULL));

	for (;;) {
		sleep(1);
	}
	return 0;
}


void sigTimer_handler(int signum){
	static bool flipFlop = 0;
	gpio_fs.open((gpio_filepath + gpio_File).c_str());
	flipFlop = !flipFlop;
	gpio_fs << flipFlop;
	gpio_fs.close();
	//printf("Sample now! \n");
}
